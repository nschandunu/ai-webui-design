#!/bin/bash

# ADVANCED INTEGRATION SCRIPT V2
# This script intelligently splits a React file into multiple components,
# dynamically analyzes their dependencies, and integrates them into a Next.js project.
# It includes pre-flight checks, dynamic import generation, and cleanup.

# --- Configuration ---
set -e # Exit immediately if a command exits with a non-zero status.
SRC_FILE="generated.tsx"
COMPONENTS_DIR="src/components/landing"
MAIN_PAGE="src/app/page.tsx"

# --- Pre-flight Checks ---
echo "🚀 Starting advanced component integration..."

if ! command -v awk &> /dev/null; then
    echo "❌ Error: 'awk' is not installed. Please install awk to continue."
    exit 1
fi

if [ ! -f "$SRC_FILE" ]; then
    echo "❌ Error: Source file '$SRC_FILE' not found in the project root."
    echo "Please save the generated code with markers as '$SRC_FILE' before running this script."
    exit 1
fi

# --- Main Logic ---
echo "✅ Pre-flight checks passed."
echo "📁 Ensuring component directory exists: $COMPONENTS_DIR"
mkdir -p "$COMPONENTS_DIR"

echo "⚙️ Parsing '$SRC_FILE' and generating component files..."

# Use awk to parse the source file.
# It identifies component blocks, extracts dependencies, and writes individual files.
awk '
  # Function to write import statements based on dependency type
  function write_imports(deps, file) {
    # Always import React
    if (deps ~ /useState/) {
      print "import React, { useState } from \x27react\x27;" > file
    } else {
      print "import React from \x27react\x27;" > file
    }

    # Build a list of lucide-react icons to import
    lucide_imports = ""
    if (deps ~ /ChevronRight/) { lucide_imports = lucide_imports "ChevronRight, " }
    if (deps ~ /CheckCircle2/) { lucide_imports = lucide_imports "CheckCircle2, " }
    if (deps ~ /Star/)         { lucide_imports = lucide_imports "Star, " }
    
    # If there are lucide icons, write the import statement
    if (length(lucide_imports) > 0) {
      # Remove trailing comma and space
      sub(/, $/, "", lucide_imports)
      print "import { " lucide_imports " } from \x27lucide-react\x27;" >> file
    }

    # Import other components
    if (deps ~ /CtaButton/) {
      print "import CtaButton from \x27./CtaButton\x27;" >> file
    }
  }

  # Main processing block
  /^\/\/ COMPONENT_START:/ {
    component_name = $2
    
    # Skip the main HomePage component, it will be handled separately
    if (component_name == "HomePage") {
      in_home_page_block = 1
      next
    }

    # Define the output file path
    output_file = "'"$COMPONENTS_DIR"'" "/" component_name ".tsx"
    
    # Extract dependencies from the USES: marker
    dependencies = ""
    if (NF > 3 && $3 == "USES:") {
      dependencies = $4
    }
    
    # Write the necessary imports to the new component file
    write_imports(dependencies, output_file)
    
    # Set a flag to start printing lines to the file
    is_printing = 1
    next
  }

  /^\/\/ COMPONENT_END:/ {
    if (in_home_page_block) {
      in_home_page_block = 0
      next
    }

    if (is_printing) {
      # Get the component name from the end marker
      component_name = $2
      output_file = "'"$COMPONENTS_DIR"'" "/" component_name ".tsx"
      # Add the default export statement
      print "\nexport default " component_name ";" >> output_file
      # Reset the printing flag
      is_printing = 0
    }
    next
  }
  
  # If the printing flag is set, print the current line to the output file
  is_printing {
    # Clean up React.useState calls
    gsub("React.useState", "useState")
    output_file = "'"$COMPONENTS_DIR"'" "/" component_name ".tsx"
    print >> output_file
  }
' "$SRC_FILE"

echo "✅ All components extracted successfully."

# --- Update Main Page ---
echo "📝 Overwriting main page at '$MAIN_PAGE'..."

# Create the new content for page.tsx.
# This uses Next.js path aliases for cleaner imports.
cat > "$MAIN_PAGE" << EOF
// This file was auto-generated by the integration script.
// To make changes, edit the individual components in the "@/components/landing" directory.
'use client'; // Required for hooks like useState in FaqSection

import React from 'react';

// Import all the newly created landing page components
import CtaButton from '@/components/landing/CtaButton';
import Header from '@/components/landing/Header';
import HeroSection from '@/components/landing/HeroSection';
import PartnerSection from '@/components/landing/PartnerSection';
import SwitchSection from '@/components/landing/SwitchSection';
import ExpertSection from '@/components/landing/ExpertSection';
import TestimonialSection from '@/components/landing/TestimonialSection';
import ProjectsSection from '@/components/landing/ProjectsSection';
import WorkflowSection from '@/components/landing/WorkflowSection';
import FaqSection from '@/components/landing/FaqSection';
import InterestSection from '@/components/landing/InterestSection';
import Footer from '@/components/landing/Footer';

// The main home page component that assembles the entire page
export default function HomePage() {
  return (
    <div className="bg-white font-sans text-gray-800 antialiased">
      <div className="container mx-auto px-6">
        <Header />
        <main>
          <HeroSection />
          <PartnerSection />
          <SwitchSection />
          <ExpertSection />
          <TestimonialSection />
          <div className="text-center py-12">
            <CtaButton text="Get a free consultation" />
          </div>
          <ProjectsSection />
          <WorkflowSection />
          <FaqSection />
          <InterestSection />
        </main>
        <Footer />
      </div>
    </div>
  );
}
EOF

echo "✅ Main page updated successfully."

# --- Cleanup ---
read -p "🧹 Integration complete. Do you want to remove the source file '$SRC_FILE'? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm "$SRC_FILE"
    echo "🗑️ Source file '$SRC_FILE' removed."
fi

echo "🎉 All done! Your new landing page is ready."
echo "Run 'npm run dev' to see the results."